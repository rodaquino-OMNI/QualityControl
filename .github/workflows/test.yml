name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./frontend
      run: npm run typecheck
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: austa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/austa_test
      run: npx prisma migrate deploy
    
    - name: Run linting
      working-directory: ./backend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./backend
      run: npm run typecheck
    
    - name: Run unit tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test@localhost:5432/austa_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: npm run test:unit
    
    - name: Run integration tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test@localhost:5432/austa_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: npm run test:integration
    
    - name: Generate coverage report
      working-directory: ./backend
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  ai-service-tests:
    name: AI Service Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: ai-service/requirements*.txt
    
    - name: Install dependencies
      working-directory: ./ai-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      working-directory: ./ai-service
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests
    
    - name: Run type checking
      working-directory: ./ai-service
      run: mypy app
    
    - name: Run unit tests
      working-directory: ./ai-service
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test:test@localhost:5432/ai_test
        REDIS_URL: redis://localhost:6379/15
        JWT_SECRET: test-secret
        OPENAI_API_KEY: test-key
      run: pytest -v -m unit --cov=app --cov-report=xml
    
    - name: Run integration tests
      working-directory: ./ai-service
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test:test@localhost:5432/ai_test
        REDIS_URL: redis://localhost:6379/15
        JWT_SECRET: test-secret
        OPENAI_API_KEY: test-key
      run: pytest -v -m integration --cov=app --cov-report=xml --cov-append
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./ai-service/coverage.xml
        flags: ai-service
        name: ai-service-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, ai-service-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: e2e
          POSTGRES_PASSWORD: e2e
          POSTGRES_DB: austa_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install AI service dependencies
      working-directory: ./ai-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://e2e:e2e@localhost:5432/austa_e2e
      run: |
        npx prisma migrate deploy
        npx prisma db seed
    
    - name: Start services
      run: |
        # Start backend
        cd backend && npm run start &
        # Start AI service
        cd ai-service && uvicorn app.main:app --host 0.0.0.0 --port 8001 &
        # Start frontend
        cd frontend && npm run preview -- --port 3000 &
        # Wait for services to be ready
        npx wait-on http://localhost:8000/api/health http://localhost:8001/api/v1/health http://localhost:3000
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://e2e:e2e@localhost:5432/austa_e2e
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: e2e-secret
        OPENAI_API_KEY: test-key
    
    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: |
        cd frontend && npm audit --production
        cd ../backend && npm audit --production
    
    - name: Run Python security scan
      working-directory: ./ai-service
      run: |
        pip install bandit
        bandit -r app -f json -o bandit-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          ai-service/bandit-report.json