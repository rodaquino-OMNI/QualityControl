# Logstash Pipeline Configuration for AUSTA AI Service

input {
  # Beats input for Filebeat
  beats {
    port => 5045
    tags => ["beats", "ai-service"]
  }
  
  # Direct TCP input for AI service logs
  tcp {
    port => 5001
    codec => json_lines
    tags => ["tcp", "ai-service"]
  }
  
  # File input for Python logs
  file {
    path => "/var/log/ai-service/*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "ai-service"]
  }
}

filter {
  # Common field processing
  if [tags] {
    if "ai-service" in [tags] {
      mutate {
        add_field => { "service" => "austa-ai-service" }
        add_field => { "service_type" => "ml" }
        add_field => { "language" => "python" }
      }
    }
  }
  
  # Parse timestamp
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Parse JSON messages
  if [message] {
    json {
      source => "message"
      skip_on_invalid_json => true
    }
  }
  
  # Grok patterns for Python logs
  if "_jsonparsefailure" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{LOGLEVEL:level} \| %{DATA:logger} \| %{GREEDYDATA:log_message}"
      }
      remove_tag => ["_jsonparsefailure"]
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }
  
  # AI/ML specific processing
  if [model] or [prediction] or [inference] {
    mutate {
      add_tag => ["ml", "prediction"]
    }
    
    # Convert confidence scores to numbers
    if [confidence] {
      mutate {
        convert => { "confidence" => "float" }
      }
    }
    
    # Convert processing times to numbers
    if [processing_time] {
      mutate {
        convert => { "processing_time" => "float" }
      }
    }
  }
  
  # Model performance monitoring
  if [metric] and [value] {
    mutate {
      add_tag => ["model_metrics"]
    }
    
    mutate {
      convert => { "value" => "float" }
    }
  }
  
  # Security event processing
  if [eventType] == "security" or [event] =~ /auth|login|permission/ {
    mutate {
      add_tag => ["security"]
      add_field => { "alert_level" => "high" }
    }
  }
  
  # Performance event processing
  if [eventType] == "performance" or [category] == "performance" {
    mutate {
      add_tag => ["performance"]
    }
    
    if [duration] {
      mutate {
        convert => { "duration" => "integer" }
      }
    }
    
    if [memory_usage] {
      mutate {
        convert => { "memory_usage" => "integer" }
      }
    }
  }
  
  # Error processing with ML context
  if [level] == "ERROR" or [level] == "error" {
    mutate {
      add_tag => ["error"]
    }
    
    # Categorize ML errors
    if [message] =~ /model|inference|prediction|tensor/ {
      mutate {
        add_tag => ["ml_error"]
        add_field => { "error_category" => "ml_processing" }
      }
    } else if [message] =~ /memory|cuda|gpu/ {
      mutate {
        add_tag => ["resource_error"]
        add_field => { "error_category" => "resource" }
      }
    } else if [message] =~ /timeout|connection/ {
      mutate {
        add_tag => ["network_error"]
        add_field => { "error_category" => "network" }
      }
    }
  }
  
  # FastAPI specific processing
  if [url] and [method] {
    mutate {
      add_tag => ["api_request"]
    }
    
    # Extract API endpoint patterns
    if [url] =~ /^\/models/ {
      mutate { add_field => { "api_category" => "model_management" } }
    } else if [url] =~ /^\/analysis/ {
      mutate { add_field => { "api_category" => "analysis" } }
    } else if [url] =~ /^\/chat/ {
      mutate { add_field => { "api_category" => "chat" } }
    } else if [url] =~ /^\/health/ {
      mutate { add_field => { "api_category" => "health" } }
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => ["beat", "input", "prospector", "offset", "source"]
  }
  
  # Add processing metadata
  mutate {
    add_field => { "processed_at" => "%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}" }
  }
}

output {
  # Main AI service logs
  if "ai-service" in [tags] and "error" not in [tags] and "security" not in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-ai-service-logs-%{+YYYY.MM.dd}"
      template_name => "austa-ai-service-logs"
      template_pattern => "austa-ai-service-logs-*"
      template => "/usr/share/logstash/templates/ai-service-template.json"
      template_overwrite => true
    }
  }
  
  # ML model performance logs
  if "ml" in [tags] or "model_metrics" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-ml-metrics-%{+YYYY.MM.dd}"
      template_name => "austa-ml-metrics"
      template_pattern => "austa-ml-metrics-*"
      template => "/usr/share/logstash/templates/ml-metrics-template.json"
      template_overwrite => true
    }
  }
  
  # AI service errors
  if "error" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-ai-service-errors-%{+YYYY.MM.dd}"
      template_name => "austa-ai-service-errors"
      template_pattern => "austa-ai-service-errors-*"
      template => "/usr/share/logstash/templates/ai-error-template.json"
      template_overwrite => true
    }
  }
  
  # Security logs
  if "security" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-security-logs-%{+YYYY.MM.dd}"
      template_name => "austa-security-logs"
      template_pattern => "austa-security-logs-*"
      template => "/usr/share/logstash/templates/security-template.json"
      template_overwrite => true
    }
  }
  
  # Performance logs
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-performance-logs-%{+YYYY.MM.dd}"
      template_name => "austa-performance-logs"
      template_pattern => "austa-performance-logs-*"
      template => "/usr/share/logstash/templates/performance-template.json"
      template_overwrite => true
    }
  }
  
  # Debug output
  if [level] == "DEBUG" {
    stdout {
      codec => rubydebug
    }
  }
}