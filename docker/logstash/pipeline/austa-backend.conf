# Logstash Pipeline Configuration for AUSTA Backend Service

input {
  # Beats input for Filebeat
  beats {
    port => 5044
    tags => ["beats", "backend"]
  }
  
  # Direct TCP input for application logs
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp", "backend"]
  }
  
  # HTTP input for structured logs
  http {
    port => 8080
    codec => json
    tags => ["http", "backend"]
  }
  
  # File input as fallback
  file {
    path => "/var/log/backend/*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "backend"]
  }
}

filter {
  # Common field processing
  if [tags] {
    if "backend" in [tags] {
      mutate {
        add_field => { "service" => "austa-backend" }
        add_field => { "service_type" => "api" }
      }
    }
  }
  
  # Parse timestamp if not already parsed
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Extract structured log fields
  if [message] {
    # Try to parse JSON messages
    json {
      source => "message"
      skip_on_invalid_json => true
    }
  }
  
  # Grok patterns for non-JSON logs
  if "_jsonparsefailure" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\]: %{GREEDYDATA:log_message}"
      }
      remove_tag => ["_jsonparsefailure"]
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }
  
  # Security event processing
  if [eventType] == "security" or [category] == "security" {
    mutate {
      add_tag => ["security"]
      add_field => { "alert_level" => "high" }
    }
    
    # Parse IP addresses for geolocation
    if [ip] {
      geoip {
        source => "ip"
        target => "geoip"
      }
    }
  }
  
  # Performance event processing
  if [eventType] == "performance" or [category] == "performance" {
    mutate {
      add_tag => ["performance"]
    }
    
    # Convert metrics to numbers
    if [responseTime] {
      mutate {
        convert => { "responseTime" => "integer" }
      }
    }
    
    if [value] {
      mutate {
        convert => { "value" => "float" }
      }
    }
  }
  
  # Audit event processing
  if [eventType] == "audit" or [category] == "audit" {
    mutate {
      add_tag => ["audit"]
      add_field => { "compliance" => "required" }
    }
  }
  
  # Business event processing
  if [eventType] == "business" or [category] == "business" {
    mutate {
      add_tag => ["business"]
    }
  }
  
  # HTTP request/response processing
  if [type] == "request" or [type] == "response" {
    mutate {
      add_tag => ["http"]
    }
    
    # Categorize HTTP status codes
    if [statusCode] {
      if [statusCode] >= 200 and [statusCode] < 300 {
        mutate { add_field => { "http_status_category" => "success" } }
      } else if [statusCode] >= 300 and [statusCode] < 400 {
        mutate { add_field => { "http_status_category" => "redirect" } }
      } else if [statusCode] >= 400 and [statusCode] < 500 {
        mutate { add_field => { "http_status_category" => "client_error" } }
        mutate { add_tag => ["error"] }
      } else if [statusCode] >= 500 {
        mutate { add_field => { "http_status_category" => "server_error" } }
        mutate { add_tag => ["error", "alert"] }
      }
    }
  }
  
  # Error processing
  if [level] == "ERROR" or [level] == "error" {
    mutate {
      add_tag => ["error"]
    }
    
    # Extract stack trace information
    if [stack] {
      mutate {
        add_field => { "has_stack_trace" => true }
      }
    }
  }
  
  # Clean up unnecessary fields
  mutate {
    remove_field => ["beat", "input", "prospector", "offset", "source"]
  }
  
  # Add processing timestamp
  mutate {
    add_field => { "processed_at" => "%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}" }
  }
}

output {
  # Main application logs
  if "backend" in [tags] and "error" not in [tags] and "security" not in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-backend-logs-%{+YYYY.MM.dd}"
      template_name => "austa-backend-logs"
      template_pattern => "austa-backend-logs-*"
      template => "/usr/share/logstash/templates/backend-template.json"
      template_overwrite => true
    }
  }
  
  # Error logs - separate index for faster searching
  if "error" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-backend-errors-%{+YYYY.MM.dd}"
      template_name => "austa-backend-errors"
      template_pattern => "austa-backend-errors-*"
      template => "/usr/share/logstash/templates/error-template.json"
      template_overwrite => true
    }
  }
  
  # Security logs - separate index with enhanced retention
  if "security" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-security-logs-%{+YYYY.MM.dd}"
      template_name => "austa-security-logs"
      template_pattern => "austa-security-logs-*"
      template => "/usr/share/logstash/templates/security-template.json"
      template_overwrite => true
    }
  }
  
  # Performance logs
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-performance-logs-%{+YYYY.MM.dd}"
      template_name => "austa-performance-logs"
      template_pattern => "austa-performance-logs-*"
      template => "/usr/share/logstash/templates/performance-template.json"
      template_overwrite => true
    }
  }
  
  # Audit logs - separate index for compliance
  if "audit" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "austa123"
      index => "austa-audit-logs-%{+YYYY.MM.dd}"
      template_name => "austa-audit-logs"
      template_pattern => "austa-audit-logs-*"
      template => "/usr/share/logstash/templates/audit-template.json"
      template_overwrite => true
    }
  }
  
  # Debug output for development
  if [level] == "DEBUG" {
    stdout {
      codec => rubydebug
    }
  }
  
  # Dead letter queue for failed documents
  if "_failed" in [tags] {
    file {
      path => "/usr/share/logstash/logs/failed-documents.log"
      codec => json_lines
    }
  }
}